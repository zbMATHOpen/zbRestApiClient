# coding: utf-8

"""
    REST API for zbMATH Open

    a REST api for zbMATH Open, currently with endpoints for authors, classifications, documents, serials and software  # noqa: E501

    OpenAPI spec version: v0.4.3rc0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class AuthorApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_author_by_field_author_structured_search_get(self, **kwargs):  # noqa: E501
        """search authors by descriptive field names  # noqa: E501

                 # Description                    For searching in zbMATH you may employ the Structured Search for         convenient combination of all search fields. While similar to the         1-line syntax search, this endpoint offers much more convenience and         transparency which fields are searched at the cost of search         flexibility.                    # Examples           - **field:** 'author_code', **term:** 'smith.ivan': Search for the         author with the zbMATH code **smith.ivan**.           - **field:** 'author_name', **term:** 'Smith': Search for authors         with the name **Smith**.           - **field:** 'collective', **term:** 'bass.hyman': Search for the         names of the author collective(s) that the author with the zbMATH code         **bass.hyman** is in.           - **field:** 'in_collective', **term:** 'bourbaki.nicolas': Search         for authors that are in the author collective with the zbMATH code         **bourbaki.nicolas**.           # Search fields  - **author_code**: zbMATH code of author - **author_name**: name of author - **award**: awards - **collectives_of**: enter name of collective, result is authors in this collective - **external_id_type**: external Author ID: ORCID, MGP, Wikidata Numbers and others - **first_name**: first Name of the Author - **in_collective**: enter name of author, result is names of collectives the author is in - **last_name**: last Name of the Author - **main_field**: main fields of the Author (given by first two MSC digits) - **reviewer**: reviewer - **spelling**: alternative spellings of the author - **state**: status  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_author_by_field_author_structured_search_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page: pagination for result page
        :param int results_per_page:
        :param str author_code: author_code
        :param str author_name: author_name
        :param str award: award
        :param str collectives_of: collectives_of
        :param str main_field: main_field
        :param str in_collective: in_collective
        :param str external_id_type: external_id_type
        :param str first_name: first_name
        :param str last_name: last_name
        :param str reviewer: reviewer
        :param str spelling: spelling
        :param str state: state
        :return: ZbmathApiDataModelsDisplayAuthorsResultSearch
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_author_by_field_author_structured_search_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_author_by_field_author_structured_search_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_author_by_field_author_structured_search_get_with_http_info(self, **kwargs):  # noqa: E501
        """search authors by descriptive field names  # noqa: E501

                 # Description                    For searching in zbMATH you may employ the Structured Search for         convenient combination of all search fields. While similar to the         1-line syntax search, this endpoint offers much more convenience and         transparency which fields are searched at the cost of search         flexibility.                    # Examples           - **field:** 'author_code', **term:** 'smith.ivan': Search for the         author with the zbMATH code **smith.ivan**.           - **field:** 'author_name', **term:** 'Smith': Search for authors         with the name **Smith**.           - **field:** 'collective', **term:** 'bass.hyman': Search for the         names of the author collective(s) that the author with the zbMATH code         **bass.hyman** is in.           - **field:** 'in_collective', **term:** 'bourbaki.nicolas': Search         for authors that are in the author collective with the zbMATH code         **bourbaki.nicolas**.           # Search fields  - **author_code**: zbMATH code of author - **author_name**: name of author - **award**: awards - **collectives_of**: enter name of collective, result is authors in this collective - **external_id_type**: external Author ID: ORCID, MGP, Wikidata Numbers and others - **first_name**: first Name of the Author - **in_collective**: enter name of author, result is names of collectives the author is in - **last_name**: last Name of the Author - **main_field**: main fields of the Author (given by first two MSC digits) - **reviewer**: reviewer - **spelling**: alternative spellings of the author - **state**: status  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_author_by_field_author_structured_search_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page: pagination for result page
        :param int results_per_page:
        :param str author_code: author_code
        :param str author_name: author_name
        :param str award: award
        :param str collectives_of: collectives_of
        :param str main_field: main_field
        :param str in_collective: in_collective
        :param str external_id_type: external_id_type
        :param str first_name: first_name
        :param str last_name: last_name
        :param str reviewer: reviewer
        :param str spelling: spelling
        :param str state: state
        :return: ZbmathApiDataModelsDisplayAuthorsResultSearch
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page', 'results_per_page', 'author_code', 'author_name', 'award', 'collectives_of', 'main_field', 'in_collective', 'external_id_type', 'first_name', 'last_name', 'reviewer', 'spelling', 'state']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_author_by_field_author_structured_search_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'results_per_page' in params:
            query_params.append(('results_per_page', params['results_per_page']))  # noqa: E501
        if 'author_code' in params:
            query_params.append(('author_code', params['author_code']))  # noqa: E501
        if 'author_name' in params:
            query_params.append(('author_name', params['author_name']))  # noqa: E501
        if 'award' in params:
            query_params.append(('award', params['award']))  # noqa: E501
        if 'collectives_of' in params:
            query_params.append(('collectives_of', params['collectives_of']))  # noqa: E501
        if 'main_field' in params:
            query_params.append(('main_field', params['main_field']))  # noqa: E501
        if 'in_collective' in params:
            query_params.append(('in_collective', params['in_collective']))  # noqa: E501
        if 'external_id_type' in params:
            query_params.append(('external_id_type', params['external_id_type']))  # noqa: E501
        if 'first_name' in params:
            query_params.append(('first_name', params['first_name']))  # noqa: E501
        if 'last_name' in params:
            query_params.append(('last_name', params['last_name']))  # noqa: E501
        if 'reviewer' in params:
            query_params.append(('reviewer', params['reviewer']))  # noqa: E501
        if 'spelling' in params:
            query_params.append(('spelling', params['spelling']))  # noqa: E501
        if 'state' in params:
            query_params.append(('state', params['state']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/author/_structured_search', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ZbmathApiDataModelsDisplayAuthorsResultSearch',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_author_by_syntax_string_author_search_get(self, search_string, **kwargs):  # noqa: E501
        """search authors by zbMATH style user query  # noqa: E501

                 # Description                    The syntax search allows for free logical combinations of all         available search fields. While similar to the structured search,         this endpoint offers much more flexibility at the cost of obscure         search parameters.                    # Examples           - **Simon Donald*** : Search in all parts of an author's name         (results contain Simon, Donald M. and Donaldson, Simon Kirwan).           - **ln:Donald\\* fn:Simon** : Search for specified family and given         name.           - **au:Stefan Müller cc:49** : Combine name search with main MSC         fields           - **au:Helga Bunke** : Search results include name variations,         in particular name changes, different transliterations and         pseudonyms. Names of collectives will be displayed as a separate entity.           - **(st:r & b) | (st:o)** Search results include all reviewers with         biographic information or collectives.           - **(en:MGP | wikidata) ln:a*** : Search results include all         authors having either an entry in the Math Genealogy Project or in         Wikidata and whose family name starts with \"A\".           - **aw:Fields Abel** Search for all Fields Medal Winners who also         received an Abel Prize.            # Search fields  - **ai**: zbMATH code of author - **au**: name of author - **aw**: awards - **cc**: main fields of the Author (given by first two MSC digits) - **cm**: enter name of collective, result is authors in this collective - **co**: enter name of author, result is names of collectives the author is in - **en**: external Author ID: ORCID, MGP, Wikidata Numbers and others - **fn**: first Name of the Author - **ln**: last Name of the Author - **rv**: reviewer - **sp**: alternative spellings of the author - **st**: status            # Operators          - **a & b**: logical and          - **a | b**: logical or          - **!ab**: logical not          - **abc***: right wildcard          - **\"ab c\"**: phrase          - **(ab c)**: parentheses           # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_author_by_syntax_string_author_search_get(search_string, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str search_string: (required)
        :param int page:
        :param int results_per_page:
        :return: ZbmathApiDataModelsDisplayAuthorsResultSearch
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_author_by_syntax_string_author_search_get_with_http_info(search_string, **kwargs)  # noqa: E501
        else:
            (data) = self.get_author_by_syntax_string_author_search_get_with_http_info(search_string, **kwargs)  # noqa: E501
            return data

    def get_author_by_syntax_string_author_search_get_with_http_info(self, search_string, **kwargs):  # noqa: E501
        """search authors by zbMATH style user query  # noqa: E501

                 # Description                    The syntax search allows for free logical combinations of all         available search fields. While similar to the structured search,         this endpoint offers much more flexibility at the cost of obscure         search parameters.                    # Examples           - **Simon Donald*** : Search in all parts of an author's name         (results contain Simon, Donald M. and Donaldson, Simon Kirwan).           - **ln:Donald\\* fn:Simon** : Search for specified family and given         name.           - **au:Stefan Müller cc:49** : Combine name search with main MSC         fields           - **au:Helga Bunke** : Search results include name variations,         in particular name changes, different transliterations and         pseudonyms. Names of collectives will be displayed as a separate entity.           - **(st:r & b) | (st:o)** Search results include all reviewers with         biographic information or collectives.           - **(en:MGP | wikidata) ln:a*** : Search results include all         authors having either an entry in the Math Genealogy Project or in         Wikidata and whose family name starts with \"A\".           - **aw:Fields Abel** Search for all Fields Medal Winners who also         received an Abel Prize.            # Search fields  - **ai**: zbMATH code of author - **au**: name of author - **aw**: awards - **cc**: main fields of the Author (given by first two MSC digits) - **cm**: enter name of collective, result is authors in this collective - **co**: enter name of author, result is names of collectives the author is in - **en**: external Author ID: ORCID, MGP, Wikidata Numbers and others - **fn**: first Name of the Author - **ln**: last Name of the Author - **rv**: reviewer - **sp**: alternative spellings of the author - **st**: status            # Operators          - **a & b**: logical and          - **a | b**: logical or          - **!ab**: logical not          - **abc***: right wildcard          - **\"ab c\"**: phrase          - **(ab c)**: parentheses           # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_author_by_syntax_string_author_search_get_with_http_info(search_string, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str search_string: (required)
        :param int page:
        :param int results_per_page:
        :return: ZbmathApiDataModelsDisplayAuthorsResultSearch
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['search_string', 'page', 'results_per_page']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_author_by_syntax_string_author_search_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'search_string' is set
        if ('search_string' not in params or
                params['search_string'] is None):
            raise ValueError("Missing the required parameter `search_string` when calling `get_author_by_syntax_string_author_search_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'search_string' in params:
            query_params.append(('search_string', params['search_string']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'results_per_page' in params:
            query_params.append(('results_per_page', params['results_per_page']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/author/_search', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ZbmathApiDataModelsDisplayAuthorsResultSearch',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_author_by_zbmath_code_author_code_get(self, code, **kwargs):  # noqa: E501
        """get author data by author code  # noqa: E501

                 # Description                    # About this Endpoint            Use this endpoint if you have the exact zbMATH code of the author in         question. The result will contain only one dataset corresponding to         that code, if entered correctly.            The format of the author's zbMATH code is         **lastname.firstname-additionalname**.            # Example           - **bourbaki.nicolas** is a collective of authors            # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_author_by_zbmath_code_author_code_get(code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str code: (required)
        :return: ZbmathApiDataModelsDisplayAuthorsResultID
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_author_by_zbmath_code_author_code_get_with_http_info(code, **kwargs)  # noqa: E501
        else:
            (data) = self.get_author_by_zbmath_code_author_code_get_with_http_info(code, **kwargs)  # noqa: E501
            return data

    def get_author_by_zbmath_code_author_code_get_with_http_info(self, code, **kwargs):  # noqa: E501
        """get author data by author code  # noqa: E501

                 # Description                    # About this Endpoint            Use this endpoint if you have the exact zbMATH code of the author in         question. The result will contain only one dataset corresponding to         that code, if entered correctly.            The format of the author's zbMATH code is         **lastname.firstname-additionalname**.            # Example           - **bourbaki.nicolas** is a collective of authors            # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_author_by_zbmath_code_author_code_get_with_http_info(code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str code: (required)
        :return: ZbmathApiDataModelsDisplayAuthorsResultID
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['code']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_author_by_zbmath_code_author_code_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'code' is set
        if ('code' not in params or
                params['code'] is None):
            raise ValueError("Missing the required parameter `code` when calling `get_author_by_zbmath_code_author_code_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'code' in params:
            path_params['code'] = params['code']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/author/{code}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ZbmathApiDataModelsDisplayAuthorsResultID',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def intro_author_get(self, **kwargs):  # noqa: E501
        """introduction for user help regarding this endpoint  # noqa: E501

                # About this Endpoint         For searching in zbMATH you may employ the Structured Search,        which allows for convenient search of all relevant fields.         The syntax search on the other hand allows for free logical        combinations of all available search fields and is much more        flexible. In the following you will find a short explanation of        available search fields.         Use the Authors Search to find information on specific authors.        Author profiles include indexed publications, co-authors,        main fields, and a citation profile.         - **/_search**: make use of the zbMATH search syntax for complex        search. Examples on how to make use of the syntax can be found  in        the endpoint itself.         - **/_structured_search**: a number of fields for a structured        search         - **/{id}**: if a zbMATH id for the author in question is available,        you man enter it here, to return the meta data information of just        this one author.                   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.intro_author_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.intro_author_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.intro_author_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def intro_author_get_with_http_info(self, **kwargs):  # noqa: E501
        """introduction for user help regarding this endpoint  # noqa: E501

                # About this Endpoint         For searching in zbMATH you may employ the Structured Search,        which allows for convenient search of all relevant fields.         The syntax search on the other hand allows for free logical        combinations of all available search fields and is much more        flexible. In the following you will find a short explanation of        available search fields.         Use the Authors Search to find information on specific authors.        Author profiles include indexed publications, co-authors,        main fields, and a citation profile.         - **/_search**: make use of the zbMATH search syntax for complex        search. Examples on how to make use of the syntax can be found  in        the endpoint itself.         - **/_structured_search**: a number of fields for a structured        search         - **/{id}**: if a zbMATH id for the author in question is available,        you man enter it here, to return the meta data information of just        this one author.                   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.intro_author_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method intro_author_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/author/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
