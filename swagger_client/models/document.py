# coding: utf-8

"""
    REST API for zbMATH Open

    a REST api for zbMATH Open, currently with endpoints for authors, classifications, documents, serials and software  # noqa: E501

    OpenAPI spec version: v0.4.3rc0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Document(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'biographic_references': 'list[BiographicReference]',
        'contributors': 'AllOfDocumentContributors',
        'document_type': 'DocumentType',
        'editorial_contributions': 'list[EditorialContribution]',
        'id': 'int',
        'keywords': 'list[object]',
        'language': 'AllOfDocumentLanguage',
        'links': 'list[Link]',
        'msc': 'list[MSC]',
        'references': 'list[Reference]',
        'source': 'AllOfDocumentSource',
        'states': 'list[State]',
        'title': 'AllOfDocumentTitle',
        'year': 'str',
        'zbmath_url': 'str',
        'data_source': 'object'
    }

    attribute_map = {
        'biographic_references': 'biographic_references',
        'contributors': 'contributors',
        'document_type': 'document_type',
        'editorial_contributions': 'editorial_contributions',
        'id': 'id',
        'keywords': 'keywords',
        'language': 'language',
        'links': 'links',
        'msc': 'msc',
        'references': 'references',
        'source': 'source',
        'states': 'states',
        'title': 'title',
        'year': 'year',
        'zbmath_url': 'zbmath_url',
        'data_source': 'data_source'
    }

    def __init__(self, biographic_references=None, contributors=None, document_type=None, editorial_contributions=None, id=None, keywords=None, language=None, links=None, msc=None, references=None, source=None, states=None, title=None, year=None, zbmath_url=None, data_source=None):  # noqa: E501
        """Document - a model defined in Swagger"""  # noqa: E501
        self._biographic_references = None
        self._contributors = None
        self._document_type = None
        self._editorial_contributions = None
        self._id = None
        self._keywords = None
        self._language = None
        self._links = None
        self._msc = None
        self._references = None
        self._source = None
        self._states = None
        self._title = None
        self._year = None
        self._zbmath_url = None
        self._data_source = None
        self.discriminator = None
        if biographic_references is not None:
            self.biographic_references = biographic_references
        if contributors is not None:
            self.contributors = contributors
        if document_type is not None:
            self.document_type = document_type
        if editorial_contributions is not None:
            self.editorial_contributions = editorial_contributions
        self.id = id
        if keywords is not None:
            self.keywords = keywords
        if language is not None:
            self.language = language
        if links is not None:
            self.links = links
        if msc is not None:
            self.msc = msc
        if references is not None:
            self.references = references
        if source is not None:
            self.source = source
        if states is not None:
            self.states = states
        if title is not None:
            self.title = title
        if year is not None:
            self.year = year
        if zbmath_url is not None:
            self.zbmath_url = zbmath_url
        if data_source is not None:
            self.data_source = data_source

    @property
    def biographic_references(self):
        """Gets the biographic_references of this Document.  # noqa: E501


        :return: The biographic_references of this Document.  # noqa: E501
        :rtype: list[BiographicReference]
        """
        return self._biographic_references

    @biographic_references.setter
    def biographic_references(self, biographic_references):
        """Sets the biographic_references of this Document.


        :param biographic_references: The biographic_references of this Document.  # noqa: E501
        :type: list[BiographicReference]
        """

        self._biographic_references = biographic_references

    @property
    def contributors(self):
        """Gets the contributors of this Document.  # noqa: E501


        :return: The contributors of this Document.  # noqa: E501
        :rtype: AllOfDocumentContributors
        """
        return self._contributors

    @contributors.setter
    def contributors(self, contributors):
        """Sets the contributors of this Document.


        :param contributors: The contributors of this Document.  # noqa: E501
        :type: AllOfDocumentContributors
        """

        self._contributors = contributors

    @property
    def document_type(self):
        """Gets the document_type of this Document.  # noqa: E501


        :return: The document_type of this Document.  # noqa: E501
        :rtype: DocumentType
        """
        return self._document_type

    @document_type.setter
    def document_type(self, document_type):
        """Sets the document_type of this Document.


        :param document_type: The document_type of this Document.  # noqa: E501
        :type: DocumentType
        """

        self._document_type = document_type

    @property
    def editorial_contributions(self):
        """Gets the editorial_contributions of this Document.  # noqa: E501


        :return: The editorial_contributions of this Document.  # noqa: E501
        :rtype: list[EditorialContribution]
        """
        return self._editorial_contributions

    @editorial_contributions.setter
    def editorial_contributions(self, editorial_contributions):
        """Sets the editorial_contributions of this Document.


        :param editorial_contributions: The editorial_contributions of this Document.  # noqa: E501
        :type: list[EditorialContribution]
        """

        self._editorial_contributions = editorial_contributions

    @property
    def id(self):
        """Gets the id of this Document.  # noqa: E501


        :return: The id of this Document.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Document.


        :param id: The id of this Document.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def keywords(self):
        """Gets the keywords of this Document.  # noqa: E501


        :return: The keywords of this Document.  # noqa: E501
        :rtype: list[object]
        """
        return self._keywords

    @keywords.setter
    def keywords(self, keywords):
        """Sets the keywords of this Document.


        :param keywords: The keywords of this Document.  # noqa: E501
        :type: list[object]
        """

        self._keywords = keywords

    @property
    def language(self):
        """Gets the language of this Document.  # noqa: E501


        :return: The language of this Document.  # noqa: E501
        :rtype: AllOfDocumentLanguage
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this Document.


        :param language: The language of this Document.  # noqa: E501
        :type: AllOfDocumentLanguage
        """

        self._language = language

    @property
    def links(self):
        """Gets the links of this Document.  # noqa: E501


        :return: The links of this Document.  # noqa: E501
        :rtype: list[Link]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this Document.


        :param links: The links of this Document.  # noqa: E501
        :type: list[Link]
        """

        self._links = links

    @property
    def msc(self):
        """Gets the msc of this Document.  # noqa: E501


        :return: The msc of this Document.  # noqa: E501
        :rtype: list[MSC]
        """
        return self._msc

    @msc.setter
    def msc(self, msc):
        """Sets the msc of this Document.


        :param msc: The msc of this Document.  # noqa: E501
        :type: list[MSC]
        """

        self._msc = msc

    @property
    def references(self):
        """Gets the references of this Document.  # noqa: E501


        :return: The references of this Document.  # noqa: E501
        :rtype: list[Reference]
        """
        return self._references

    @references.setter
    def references(self, references):
        """Sets the references of this Document.


        :param references: The references of this Document.  # noqa: E501
        :type: list[Reference]
        """

        self._references = references

    @property
    def source(self):
        """Gets the source of this Document.  # noqa: E501


        :return: The source of this Document.  # noqa: E501
        :rtype: AllOfDocumentSource
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this Document.


        :param source: The source of this Document.  # noqa: E501
        :type: AllOfDocumentSource
        """

        self._source = source

    @property
    def states(self):
        """Gets the states of this Document.  # noqa: E501


        :return: The states of this Document.  # noqa: E501
        :rtype: list[State]
        """
        return self._states

    @states.setter
    def states(self, states):
        """Sets the states of this Document.


        :param states: The states of this Document.  # noqa: E501
        :type: list[State]
        """

        self._states = states

    @property
    def title(self):
        """Gets the title of this Document.  # noqa: E501


        :return: The title of this Document.  # noqa: E501
        :rtype: AllOfDocumentTitle
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Document.


        :param title: The title of this Document.  # noqa: E501
        :type: AllOfDocumentTitle
        """

        self._title = title

    @property
    def year(self):
        """Gets the year of this Document.  # noqa: E501


        :return: The year of this Document.  # noqa: E501
        :rtype: str
        """
        return self._year

    @year.setter
    def year(self, year):
        """Sets the year of this Document.


        :param year: The year of this Document.  # noqa: E501
        :type: str
        """

        self._year = year

    @property
    def zbmath_url(self):
        """Gets the zbmath_url of this Document.  # noqa: E501


        :return: The zbmath_url of this Document.  # noqa: E501
        :rtype: str
        """
        return self._zbmath_url

    @zbmath_url.setter
    def zbmath_url(self, zbmath_url):
        """Sets the zbmath_url of this Document.


        :param zbmath_url: The zbmath_url of this Document.  # noqa: E501
        :type: str
        """

        self._zbmath_url = zbmath_url

    @property
    def data_source(self):
        """Gets the data_source of this Document.  # noqa: E501


        :return: The data_source of this Document.  # noqa: E501
        :rtype: object
        """
        return self._data_source

    @data_source.setter
    def data_source(self, data_source):
        """Sets the data_source of this Document.


        :param data_source: The data_source of this Document.  # noqa: E501
        :type: object
        """

        self._data_source = data_source

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Document, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Document):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
