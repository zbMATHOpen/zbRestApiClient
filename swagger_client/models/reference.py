# coding: utf-8

"""
    REST API for zbMATH Open

    a REST api for zbMATH Open, currently with endpoints for authors, classifications, documents, serials and software  # noqa: E501

    OpenAPI spec version: v0.4.3rc0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Reference(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'doi': 'str',
        'position': 'str',
        'text': 'str',
        'zbmath': 'AllOfReferenceZbmath'
    }

    attribute_map = {
        'doi': 'doi',
        'position': 'position',
        'text': 'text',
        'zbmath': 'zbmath'
    }

    def __init__(self, doi=None, position=None, text=None, zbmath=None):  # noqa: E501
        """Reference - a model defined in Swagger"""  # noqa: E501
        self._doi = None
        self._position = None
        self._text = None
        self._zbmath = None
        self.discriminator = None
        if doi is not None:
            self.doi = doi
        if position is not None:
            self.position = position
        if text is not None:
            self.text = text
        if zbmath is not None:
            self.zbmath = zbmath

    @property
    def doi(self):
        """Gets the doi of this Reference.  # noqa: E501


        :return: The doi of this Reference.  # noqa: E501
        :rtype: str
        """
        return self._doi

    @doi.setter
    def doi(self, doi):
        """Sets the doi of this Reference.


        :param doi: The doi of this Reference.  # noqa: E501
        :type: str
        """

        self._doi = doi

    @property
    def position(self):
        """Gets the position of this Reference.  # noqa: E501


        :return: The position of this Reference.  # noqa: E501
        :rtype: str
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this Reference.


        :param position: The position of this Reference.  # noqa: E501
        :type: str
        """

        self._position = position

    @property
    def text(self):
        """Gets the text of this Reference.  # noqa: E501


        :return: The text of this Reference.  # noqa: E501
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this Reference.


        :param text: The text of this Reference.  # noqa: E501
        :type: str
        """

        self._text = text

    @property
    def zbmath(self):
        """Gets the zbmath of this Reference.  # noqa: E501


        :return: The zbmath of this Reference.  # noqa: E501
        :rtype: AllOfReferenceZbmath
        """
        return self._zbmath

    @zbmath.setter
    def zbmath(self, zbmath):
        """Sets the zbmath of this Reference.


        :param zbmath: The zbmath of this Reference.  # noqa: E501
        :type: AllOfReferenceZbmath
        """

        self._zbmath = zbmath

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Reference, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Reference):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
