# coding: utf-8

"""
    REST API for zbMATH Open

    a REST api for zbMATH Open, currently with endpoints for authors, classifications, documents, serials and software  # noqa: E501

    OpenAPI spec version: v0.4.3rc0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Reviewer(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'author_code': 'str',
        'reviewer_id': 'str',
        'name': 'str',
        'sign': 'str'
    }

    attribute_map = {
        'author_code': 'author_code',
        'reviewer_id': 'reviewer_id',
        'name': 'name',
        'sign': 'sign'
    }

    def __init__(self, author_code=None, reviewer_id=None, name=None, sign=None):  # noqa: E501
        """Reviewer - a model defined in Swagger"""  # noqa: E501
        self._author_code = None
        self._reviewer_id = None
        self._name = None
        self._sign = None
        self.discriminator = None
        if author_code is not None:
            self.author_code = author_code
        if reviewer_id is not None:
            self.reviewer_id = reviewer_id
        if name is not None:
            self.name = name
        if sign is not None:
            self.sign = sign

    @property
    def author_code(self):
        """Gets the author_code of this Reviewer.  # noqa: E501


        :return: The author_code of this Reviewer.  # noqa: E501
        :rtype: str
        """
        return self._author_code

    @author_code.setter
    def author_code(self, author_code):
        """Sets the author_code of this Reviewer.


        :param author_code: The author_code of this Reviewer.  # noqa: E501
        :type: str
        """

        self._author_code = author_code

    @property
    def reviewer_id(self):
        """Gets the reviewer_id of this Reviewer.  # noqa: E501


        :return: The reviewer_id of this Reviewer.  # noqa: E501
        :rtype: str
        """
        return self._reviewer_id

    @reviewer_id.setter
    def reviewer_id(self, reviewer_id):
        """Sets the reviewer_id of this Reviewer.


        :param reviewer_id: The reviewer_id of this Reviewer.  # noqa: E501
        :type: str
        """

        self._reviewer_id = reviewer_id

    @property
    def name(self):
        """Gets the name of this Reviewer.  # noqa: E501


        :return: The name of this Reviewer.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Reviewer.


        :param name: The name of this Reviewer.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def sign(self):
        """Gets the sign of this Reviewer.  # noqa: E501


        :return: The sign of this Reviewer.  # noqa: E501
        :rtype: str
        """
        return self._sign

    @sign.setter
    def sign(self, sign):
        """Sets the sign of this Reviewer.


        :param sign: The sign of this Reviewer.  # noqa: E501
        :type: str
        """

        self._sign = sign

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Reviewer, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Reviewer):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
