# coding: utf-8

"""
    REST API for zbMATH Open

    a REST api for zbMATH Open, currently with endpoints for authors, classifications, documents, serials and software  # noqa: E501

    OpenAPI spec version: v0.4.3rc0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Spelling(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'count': 'int',
        'first_name': 'str',
        'initials': 'str',
        'last_name': 'str',
        'name': 'str'
    }

    attribute_map = {
        'count': 'count',
        'first_name': 'first_name',
        'initials': 'initials',
        'last_name': 'last_name',
        'name': 'name'
    }

    def __init__(self, count=None, first_name=None, initials=None, last_name=None, name=None):  # noqa: E501
        """Spelling - a model defined in Swagger"""  # noqa: E501
        self._count = None
        self._first_name = None
        self._initials = None
        self._last_name = None
        self._name = None
        self.discriminator = None
        if count is not None:
            self.count = count
        if first_name is not None:
            self.first_name = first_name
        if initials is not None:
            self.initials = initials
        if last_name is not None:
            self.last_name = last_name
        if name is not None:
            self.name = name

    @property
    def count(self):
        """Gets the count of this Spelling.  # noqa: E501


        :return: The count of this Spelling.  # noqa: E501
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this Spelling.


        :param count: The count of this Spelling.  # noqa: E501
        :type: int
        """

        self._count = count

    @property
    def first_name(self):
        """Gets the first_name of this Spelling.  # noqa: E501


        :return: The first_name of this Spelling.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this Spelling.


        :param first_name: The first_name of this Spelling.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def initials(self):
        """Gets the initials of this Spelling.  # noqa: E501


        :return: The initials of this Spelling.  # noqa: E501
        :rtype: str
        """
        return self._initials

    @initials.setter
    def initials(self, initials):
        """Sets the initials of this Spelling.


        :param initials: The initials of this Spelling.  # noqa: E501
        :type: str
        """

        self._initials = initials

    @property
    def last_name(self):
        """Gets the last_name of this Spelling.  # noqa: E501


        :return: The last_name of this Spelling.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this Spelling.


        :param last_name: The last_name of this Spelling.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def name(self):
        """Gets the name of this Spelling.  # noqa: E501


        :return: The name of this Spelling.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Spelling.


        :param name: The name of this Spelling.  # noqa: E501
        :type: str
        """

        self._name = name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Spelling, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Spelling):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
