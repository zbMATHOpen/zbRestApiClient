# coding: utf-8

"""
    REST API for zbMATH Open

    a REST api for zbMATH Open, currently with endpoints for authors, classifications, documents, serials and software  # noqa: E501

    OpenAPI spec version: v0.4.3rc0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ZBMath(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'author_codes': 'list[object]',
        'document_id': 'int',
        'msc': 'list[object]',
        'prefix': 'str',
        'series_id': 'int',
        'year': 'str'
    }

    attribute_map = {
        'author_codes': 'author_codes',
        'document_id': 'document_id',
        'msc': 'msc',
        'prefix': 'prefix',
        'series_id': 'series_id',
        'year': 'year'
    }

    def __init__(self, author_codes=None, document_id=None, msc=None, prefix=None, series_id=0, year=None):  # noqa: E501
        """ZBMath - a model defined in Swagger"""  # noqa: E501
        self._author_codes = None
        self._document_id = None
        self._msc = None
        self._prefix = None
        self._series_id = None
        self._year = None
        self.discriminator = None
        if author_codes is not None:
            self.author_codes = author_codes
        if document_id is not None:
            self.document_id = document_id
        if msc is not None:
            self.msc = msc
        if prefix is not None:
            self.prefix = prefix
        if series_id is not None:
            self.series_id = series_id
        if year is not None:
            self.year = year

    @property
    def author_codes(self):
        """Gets the author_codes of this ZBMath.  # noqa: E501


        :return: The author_codes of this ZBMath.  # noqa: E501
        :rtype: list[object]
        """
        return self._author_codes

    @author_codes.setter
    def author_codes(self, author_codes):
        """Sets the author_codes of this ZBMath.


        :param author_codes: The author_codes of this ZBMath.  # noqa: E501
        :type: list[object]
        """

        self._author_codes = author_codes

    @property
    def document_id(self):
        """Gets the document_id of this ZBMath.  # noqa: E501


        :return: The document_id of this ZBMath.  # noqa: E501
        :rtype: int
        """
        return self._document_id

    @document_id.setter
    def document_id(self, document_id):
        """Sets the document_id of this ZBMath.


        :param document_id: The document_id of this ZBMath.  # noqa: E501
        :type: int
        """

        self._document_id = document_id

    @property
    def msc(self):
        """Gets the msc of this ZBMath.  # noqa: E501


        :return: The msc of this ZBMath.  # noqa: E501
        :rtype: list[object]
        """
        return self._msc

    @msc.setter
    def msc(self, msc):
        """Sets the msc of this ZBMath.


        :param msc: The msc of this ZBMath.  # noqa: E501
        :type: list[object]
        """

        self._msc = msc

    @property
    def prefix(self):
        """Gets the prefix of this ZBMath.  # noqa: E501


        :return: The prefix of this ZBMath.  # noqa: E501
        :rtype: str
        """
        return self._prefix

    @prefix.setter
    def prefix(self, prefix):
        """Sets the prefix of this ZBMath.


        :param prefix: The prefix of this ZBMath.  # noqa: E501
        :type: str
        """

        self._prefix = prefix

    @property
    def series_id(self):
        """Gets the series_id of this ZBMath.  # noqa: E501


        :return: The series_id of this ZBMath.  # noqa: E501
        :rtype: int
        """
        return self._series_id

    @series_id.setter
    def series_id(self, series_id):
        """Sets the series_id of this ZBMath.


        :param series_id: The series_id of this ZBMath.  # noqa: E501
        :type: int
        """

        self._series_id = series_id

    @property
    def year(self):
        """Gets the year of this ZBMath.  # noqa: E501


        :return: The year of this ZBMath.  # noqa: E501
        :rtype: str
        """
        return self._year

    @year.setter
    def year(self, year):
        """Sets the year of this ZBMath.


        :param year: The year of this ZBMath.  # noqa: E501
        :type: str
        """

        self._year = year

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ZBMath, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ZBMath):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
