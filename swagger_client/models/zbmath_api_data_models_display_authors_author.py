# coding: utf-8

"""
    REST API for zbMATH Open

    a REST api for zbMATH Open, currently with endpoints for authors, classifications, documents, serials and software  # noqa: E501

    OpenAPI spec version: v0.4.3rc0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ZbmathApiDataModelsDisplayAuthorsAuthor(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'aliases': 'list[object]',
        'awards': 'list[Award]',
        'code': 'str',
        'collective_of': 'list[object]',
        'external_ids': 'list[ExternalID]',
        'further_spellings': 'list[FurtherSpelling]',
        'id': 'int',
        'main_fields': 'list[ZbmathApiDataModelsDisplayAuthorsSubmodelsMainField]',
        'in_collective': 'list[object]',
        'name': 'str',
        'reviewer': 'str',
        'spellings': 'list[Spelling]',
        'states': 'list[State]',
        'zbmath_url': 'str',
        'data_source': 'object'
    }

    attribute_map = {
        'aliases': 'aliases',
        'awards': 'awards',
        'code': 'code',
        'collective_of': 'collective_of',
        'external_ids': 'external_ids',
        'further_spellings': 'further_spellings',
        'id': 'id',
        'main_fields': 'main_fields',
        'in_collective': 'in_collective',
        'name': 'name',
        'reviewer': 'reviewer',
        'spellings': 'spellings',
        'states': 'states',
        'zbmath_url': 'zbmath_url',
        'data_source': 'data_source'
    }

    def __init__(self, aliases=None, awards=None, code=None, collective_of=None, external_ids=None, further_spellings=None, id=None, main_fields=None, in_collective=None, name=None, reviewer=None, spellings=None, states=None, zbmath_url=None, data_source=None):  # noqa: E501
        """ZbmathApiDataModelsDisplayAuthorsAuthor - a model defined in Swagger"""  # noqa: E501
        self._aliases = None
        self._awards = None
        self._code = None
        self._collective_of = None
        self._external_ids = None
        self._further_spellings = None
        self._id = None
        self._main_fields = None
        self._in_collective = None
        self._name = None
        self._reviewer = None
        self._spellings = None
        self._states = None
        self._zbmath_url = None
        self._data_source = None
        self.discriminator = None
        if aliases is not None:
            self.aliases = aliases
        if awards is not None:
            self.awards = awards
        if code is not None:
            self.code = code
        if collective_of is not None:
            self.collective_of = collective_of
        if external_ids is not None:
            self.external_ids = external_ids
        if further_spellings is not None:
            self.further_spellings = further_spellings
        if id is not None:
            self.id = id
        if main_fields is not None:
            self.main_fields = main_fields
        if in_collective is not None:
            self.in_collective = in_collective
        if name is not None:
            self.name = name
        if reviewer is not None:
            self.reviewer = reviewer
        if spellings is not None:
            self.spellings = spellings
        if states is not None:
            self.states = states
        if zbmath_url is not None:
            self.zbmath_url = zbmath_url
        if data_source is not None:
            self.data_source = data_source

    @property
    def aliases(self):
        """Gets the aliases of this ZbmathApiDataModelsDisplayAuthorsAuthor.  # noqa: E501


        :return: The aliases of this ZbmathApiDataModelsDisplayAuthorsAuthor.  # noqa: E501
        :rtype: list[object]
        """
        return self._aliases

    @aliases.setter
    def aliases(self, aliases):
        """Sets the aliases of this ZbmathApiDataModelsDisplayAuthorsAuthor.


        :param aliases: The aliases of this ZbmathApiDataModelsDisplayAuthorsAuthor.  # noqa: E501
        :type: list[object]
        """

        self._aliases = aliases

    @property
    def awards(self):
        """Gets the awards of this ZbmathApiDataModelsDisplayAuthorsAuthor.  # noqa: E501


        :return: The awards of this ZbmathApiDataModelsDisplayAuthorsAuthor.  # noqa: E501
        :rtype: list[Award]
        """
        return self._awards

    @awards.setter
    def awards(self, awards):
        """Sets the awards of this ZbmathApiDataModelsDisplayAuthorsAuthor.


        :param awards: The awards of this ZbmathApiDataModelsDisplayAuthorsAuthor.  # noqa: E501
        :type: list[Award]
        """

        self._awards = awards

    @property
    def code(self):
        """Gets the code of this ZbmathApiDataModelsDisplayAuthorsAuthor.  # noqa: E501


        :return: The code of this ZbmathApiDataModelsDisplayAuthorsAuthor.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this ZbmathApiDataModelsDisplayAuthorsAuthor.


        :param code: The code of this ZbmathApiDataModelsDisplayAuthorsAuthor.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def collective_of(self):
        """Gets the collective_of of this ZbmathApiDataModelsDisplayAuthorsAuthor.  # noqa: E501


        :return: The collective_of of this ZbmathApiDataModelsDisplayAuthorsAuthor.  # noqa: E501
        :rtype: list[object]
        """
        return self._collective_of

    @collective_of.setter
    def collective_of(self, collective_of):
        """Sets the collective_of of this ZbmathApiDataModelsDisplayAuthorsAuthor.


        :param collective_of: The collective_of of this ZbmathApiDataModelsDisplayAuthorsAuthor.  # noqa: E501
        :type: list[object]
        """

        self._collective_of = collective_of

    @property
    def external_ids(self):
        """Gets the external_ids of this ZbmathApiDataModelsDisplayAuthorsAuthor.  # noqa: E501


        :return: The external_ids of this ZbmathApiDataModelsDisplayAuthorsAuthor.  # noqa: E501
        :rtype: list[ExternalID]
        """
        return self._external_ids

    @external_ids.setter
    def external_ids(self, external_ids):
        """Sets the external_ids of this ZbmathApiDataModelsDisplayAuthorsAuthor.


        :param external_ids: The external_ids of this ZbmathApiDataModelsDisplayAuthorsAuthor.  # noqa: E501
        :type: list[ExternalID]
        """

        self._external_ids = external_ids

    @property
    def further_spellings(self):
        """Gets the further_spellings of this ZbmathApiDataModelsDisplayAuthorsAuthor.  # noqa: E501


        :return: The further_spellings of this ZbmathApiDataModelsDisplayAuthorsAuthor.  # noqa: E501
        :rtype: list[FurtherSpelling]
        """
        return self._further_spellings

    @further_spellings.setter
    def further_spellings(self, further_spellings):
        """Sets the further_spellings of this ZbmathApiDataModelsDisplayAuthorsAuthor.


        :param further_spellings: The further_spellings of this ZbmathApiDataModelsDisplayAuthorsAuthor.  # noqa: E501
        :type: list[FurtherSpelling]
        """

        self._further_spellings = further_spellings

    @property
    def id(self):
        """Gets the id of this ZbmathApiDataModelsDisplayAuthorsAuthor.  # noqa: E501


        :return: The id of this ZbmathApiDataModelsDisplayAuthorsAuthor.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ZbmathApiDataModelsDisplayAuthorsAuthor.


        :param id: The id of this ZbmathApiDataModelsDisplayAuthorsAuthor.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def main_fields(self):
        """Gets the main_fields of this ZbmathApiDataModelsDisplayAuthorsAuthor.  # noqa: E501


        :return: The main_fields of this ZbmathApiDataModelsDisplayAuthorsAuthor.  # noqa: E501
        :rtype: list[ZbmathApiDataModelsDisplayAuthorsSubmodelsMainField]
        """
        return self._main_fields

    @main_fields.setter
    def main_fields(self, main_fields):
        """Sets the main_fields of this ZbmathApiDataModelsDisplayAuthorsAuthor.


        :param main_fields: The main_fields of this ZbmathApiDataModelsDisplayAuthorsAuthor.  # noqa: E501
        :type: list[ZbmathApiDataModelsDisplayAuthorsSubmodelsMainField]
        """

        self._main_fields = main_fields

    @property
    def in_collective(self):
        """Gets the in_collective of this ZbmathApiDataModelsDisplayAuthorsAuthor.  # noqa: E501


        :return: The in_collective of this ZbmathApiDataModelsDisplayAuthorsAuthor.  # noqa: E501
        :rtype: list[object]
        """
        return self._in_collective

    @in_collective.setter
    def in_collective(self, in_collective):
        """Sets the in_collective of this ZbmathApiDataModelsDisplayAuthorsAuthor.


        :param in_collective: The in_collective of this ZbmathApiDataModelsDisplayAuthorsAuthor.  # noqa: E501
        :type: list[object]
        """

        self._in_collective = in_collective

    @property
    def name(self):
        """Gets the name of this ZbmathApiDataModelsDisplayAuthorsAuthor.  # noqa: E501


        :return: The name of this ZbmathApiDataModelsDisplayAuthorsAuthor.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ZbmathApiDataModelsDisplayAuthorsAuthor.


        :param name: The name of this ZbmathApiDataModelsDisplayAuthorsAuthor.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def reviewer(self):
        """Gets the reviewer of this ZbmathApiDataModelsDisplayAuthorsAuthor.  # noqa: E501


        :return: The reviewer of this ZbmathApiDataModelsDisplayAuthorsAuthor.  # noqa: E501
        :rtype: str
        """
        return self._reviewer

    @reviewer.setter
    def reviewer(self, reviewer):
        """Sets the reviewer of this ZbmathApiDataModelsDisplayAuthorsAuthor.


        :param reviewer: The reviewer of this ZbmathApiDataModelsDisplayAuthorsAuthor.  # noqa: E501
        :type: str
        """

        self._reviewer = reviewer

    @property
    def spellings(self):
        """Gets the spellings of this ZbmathApiDataModelsDisplayAuthorsAuthor.  # noqa: E501


        :return: The spellings of this ZbmathApiDataModelsDisplayAuthorsAuthor.  # noqa: E501
        :rtype: list[Spelling]
        """
        return self._spellings

    @spellings.setter
    def spellings(self, spellings):
        """Sets the spellings of this ZbmathApiDataModelsDisplayAuthorsAuthor.


        :param spellings: The spellings of this ZbmathApiDataModelsDisplayAuthorsAuthor.  # noqa: E501
        :type: list[Spelling]
        """

        self._spellings = spellings

    @property
    def states(self):
        """Gets the states of this ZbmathApiDataModelsDisplayAuthorsAuthor.  # noqa: E501


        :return: The states of this ZbmathApiDataModelsDisplayAuthorsAuthor.  # noqa: E501
        :rtype: list[State]
        """
        return self._states

    @states.setter
    def states(self, states):
        """Sets the states of this ZbmathApiDataModelsDisplayAuthorsAuthor.


        :param states: The states of this ZbmathApiDataModelsDisplayAuthorsAuthor.  # noqa: E501
        :type: list[State]
        """

        self._states = states

    @property
    def zbmath_url(self):
        """Gets the zbmath_url of this ZbmathApiDataModelsDisplayAuthorsAuthor.  # noqa: E501


        :return: The zbmath_url of this ZbmathApiDataModelsDisplayAuthorsAuthor.  # noqa: E501
        :rtype: str
        """
        return self._zbmath_url

    @zbmath_url.setter
    def zbmath_url(self, zbmath_url):
        """Sets the zbmath_url of this ZbmathApiDataModelsDisplayAuthorsAuthor.


        :param zbmath_url: The zbmath_url of this ZbmathApiDataModelsDisplayAuthorsAuthor.  # noqa: E501
        :type: str
        """

        self._zbmath_url = zbmath_url

    @property
    def data_source(self):
        """Gets the data_source of this ZbmathApiDataModelsDisplayAuthorsAuthor.  # noqa: E501


        :return: The data_source of this ZbmathApiDataModelsDisplayAuthorsAuthor.  # noqa: E501
        :rtype: object
        """
        return self._data_source

    @data_source.setter
    def data_source(self, data_source):
        """Sets the data_source of this ZbmathApiDataModelsDisplayAuthorsAuthor.


        :param data_source: The data_source of this ZbmathApiDataModelsDisplayAuthorsAuthor.  # noqa: E501
        :type: object
        """

        self._data_source = data_source

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ZbmathApiDataModelsDisplayAuthorsAuthor, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ZbmathApiDataModelsDisplayAuthorsAuthor):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
